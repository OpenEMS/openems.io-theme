'use strict'

import gulp from 'gulp'
import createTask from './gulp.d/lib/create-task.js'
import log from 'fancy-log'

import buildPreviewPages from './gulp.d/tasks/build-preview-pages.js'
import build from './gulp.d/tasks/build.js'
import format from './gulp.d/tasks/format.js'
import lintCss from './gulp.d/tasks/lint-css.js'
import lintJs from './gulp.d/tasks/lint-js.js'
import pack from './gulp.d/tasks/pack.js'
import remove from './gulp.d/tasks/remove.js'
import serve from './gulp.d/tasks/serve.js'

const bundleName = 'ui'
const buildDir = 'build'
const previewSrcDir = 'preview-src'
const previewDestDir = 'public'
const srcDir = 'src'
const destDir = `${previewDestDir}/_`

// Dynamic import for conditional import
const livereload = process.env.LIVERELOAD === 'true' ? (await import('gulp-connect')).reload : undefined
const serverConfig = { host: '0.0.0.0', port: 5252, livereload } // Ensure this is using ES Module syntax

const glob = {
  all: [srcDir, previewSrcDir],
  css: `${srcDir}/css/**/*.css`,
  js: ['gulpfile.js', 'gulp.d/**/*.js', `${srcDir}/helpers/*.js`, `${srcDir}/js/**/+([^.])?(.bundle).js`],
}

export const cleanTask = createTask({
  name: 'clean',
  desc: 'Clean files and folders generated by build',
  call: remove(['build', 'public']),
})

export const lintCssTask = createTask({
  name: 'lint:css',
  desc: 'Lint the CSS source files using stylelint (standard config)',
  call: lintCss(glob.css),
})

export const lintJsTask = createTask({
  name: 'lint:js',
  desc: 'Lint the JavaScript source files using eslint (JavaScript Standard Style)',
  call: lintJs(glob.js),
})

export const lintTask = createTask({
  name: 'lint',
  desc: 'Lint the CSS and JavaScript source files',
  call: gulp.parallel(lintCssTask, lintJsTask),
})

export const formatTask = createTask({
  name: 'format',
  desc: 'Format the JavaScript source files using prettify (JavaScript Standard Style)',
  call: format(glob.js),
})

export const buildTask = createTask({
  name: 'build',
  desc: 'Build and stage the UI assets for bundling',
  call: build(
    srcDir,
    destDir,
    process.argv.slice(2).some((name) => name.startsWith('preview'))
  ),
})

export const bundleBuildTask = createTask({
  name: 'bundle:build',
  call: gulp.series(cleanTask, lintTask, buildTask),
})

export const bundlePackTask = createTask({
  name: 'bundle:pack',
  desc: 'Create a bundle of the staged UI assets for publishing',
  call: pack(
    destDir,
    buildDir,
    bundleName,
    (bundlePath) => !process.env.CI && log(`Antora option: --ui-bundle-url=${bundlePath}`)
  ),
})

export const bundleTask = createTask({
  name: 'bundle',
  desc: 'Clean, lint, build, and bundle the UI for publishing',
  call: gulp.series(bundleBuildTask, bundlePackTask),
})

export const packTask = createTask({
  name: 'pack',
  desc: '(deprecated; use bundle instead)',
  call: gulp.series(bundleTask),
})

export const buildPreviewPagesTask = createTask({
  name: 'preview:build-pages',
  call: buildPreviewPages(srcDir, previewSrcDir, previewDestDir, livereload),
})

export const previewBuildTask = createTask({
  name: 'preview:build',
  desc: 'Process and stage the UI assets and generate pages for the preview',
  call: gulp.parallel(buildTask, buildPreviewPagesTask),
})

export const previewServeTask = createTask({
  name: 'preview:serve',
  call: serve(previewDestDir, serverConfig, () => gulp.watch(glob.all, previewBuildTask)),
})

export const previewTask = createTask({
  name: 'preview',
  desc: 'Generate a preview site and launch a server to view it',
  call: gulp.series(previewBuildTask, previewServeTask),
})
